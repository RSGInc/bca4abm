Silos,Description,Target,Expression
# link volume calculations,,,
,,_auto_volume_MD,links.svol + links.hvol
,,_auto_volume_PM,links.svol_PM2 + links.hvol_PM2
,,_med_truck_volume_MD,links.mtvol
,,_med_truck_volume_PM,links.mtvol_PM2
,,_heavy_truck_volume_MD,links.htvol
,,_heavy_truck_volume_PM,links.htvol_PM2
,,_truck_volume_MD,_med_truck_volume_MD + _heavy_truck_volume_MD
,,_truck_volume_PM,_med_truck_volume_PM + _heavy_truck_volume_PM
,,_auto_volume_daily,LINK_PEAK_TOD_SHARE_AUTO *_auto_volume_PM + LINK_OFFPEAK_TOD_SHARE_AUTO * _auto_volume_MD
,,_med_truck_volume_daily,LINK_PEAK_TOD_SHARE_AUTO * _med_truck_volume_PM + LINK_OFFPEAK_TOD_SHARE_AUTO * _med_truck_volume_MD
,,_heavy_truck_volume_daily,LINK_PEAK_TOD_SHARE_AUTO * _heavy_truck_volume_PM + LINK_OFFPEAK_TOD_SHARE_AUTO * _heavy_truck_volume_MD
,,_truck_volume_daily,LINK_PEAK_TOD_SHARE_AUTO * _truck_volume_PM + LINK_OFFPEAK_TOD_SHARE_AUTO * _truck_volume_MD
,,_total_volume_daily,_auto_volume_daily + _truck_volume_daily
,,_length_MD,links.length
,,_length_PM,links.length_PM2
,,_length,"pd.concat([_length_MD,_length_PM],axis=1).max(axis=1)"
,,_waterf_MD,links.waterf
,,_waterf_PM,links.waterf_PM2
,,_waterf,"pd.concat([_waterf_MD,_waterf_PM],axis=1).max(axis=1)"
,,_noisef_MD,links.noisef
,,_noisef_PM,links.noisef_PM2
,,_noisef,"pd.concat([_noisef_MD, _noisef_PM],axis=1).max(axis=1)"
,,_vmt_total,_total_volume_daily * _length
,,_freeway_MD,links.volume_delay_func==1
,,_arterial_MD,(links.volume_delay_func==2) | (links.volume_delay_func==4)
,,_collector_MD,links.volume_delay_func==9
,,_ramp_MD,links.volume_delay_func==10
,,_freeway_PM,links.volume_delay_func_PM2==1
,,_arterial_PM,(links.volume_delay_func_PM2==2) | (links.volume_delay_func_PM2==4)
,,_collector_PM,links.volume_delay_func_PM2==9
,,_ramp_PM,links.volume_delay_func_PM2==10
,,_freeway,_freeway_MD | _freeway_PM
,,_arterial,_arterial_MD | _arterial_PM
,,_collector,_collector_MD | _collector_PM
,,_ramp,_ramp_MD | _ramp_PM
,,_speed_MD,links.speed
,,_speed_PM,links.speed_PM2
,,_speed,"pd.concat([_speed_MD,_speed_PM],axis=1).max(axis=1)"
# safety costs - intersection computations at to_node,,,
,indegree of to_node,_to_indegree,links.i.groupby(links.j).transform('count')
,outdegree of to_node,_to_outdegree,"links.j.apply(lambda x, links=links: len(links[links.i==x]))"
,is to node an intersection,_is_intersection,(_to_indegree > 2) | (_to_outdegree > 2)
,num of legs at the intersection at to_node,_num_legs,"pd.concat([_to_indegree,_to_outdegree],axis=1).max(axis=1)"
,road ID,_road_ID,"links[['i','j']].min(axis=1).astype(str) + links[['i','j']].max(axis=1).astype(str)"
,total segment volume (sum of both directions),_seg_volume,_total_volume_daily.groupby(_road_ID).transform('sum')
,max leg volume from in links at to_node,_max_in_vol,_seg_volume.groupby(links.j).transform('max')
,max leg volume from out links at to_node,_max_out_vol,"links['j'].apply(lambda x, links=links, _seg_volume=_seg_volume: max( _seg_volume[links.i==x]) if (links.i==x).any() else 0.0)"
,min leg volume from in links at to_node,_min_in_vol,_seg_volume.groupby(links['j']).transform('min')
,min leg volume from out links at to_node,_min_out_vol,"links['j'].apply(lambda x, links=links, _seg_volume=_seg_volume: min( _seg_volume[links.i==x]) if (links.i==x).any() else 0.0)"
,max volume at to_node,_max_vol,"pd.concat([_max_in_vol,_max_out_vol],axis=1).max(axis=1)"
,min volume at to_node,_min_vol,"pd.concat([_min_in_vol,_min_out_vol],axis=1).min(axis=1)"
# safety costs,,,
, SPF - roadway segment,_rs_spf,np.exp(SPF_RS_A + SPF_RS_B * np.log(_total_volume_daily) + SPF_RS_Y * np.log(_length))
, SPF - intersection,_int_spf,np.exp(SPF_INT_A + SPF_INT_B * np.log(_max_vol) + SPF_INT_Y * np.log(_min_vol))
, number of RS crashes,_crashes_rs,CALIBRATION_RS * _rs_spf * CMF_RS
, number of intersection crashes,_crashes_int,(CALIBRATION_INT * _int_spf * CMF_INT) * _is_intersection/_to_indegree
, total RS PDO crash,_rs_crashes_pdo,_crashes_rs * RS_CRASH_PDO
, total RS injury crash,_rs_crashes_inj,_crashes_rs * RS_CRASH_INJURY
, total RS fatal crash,_rs_crashes_fat,_crashes_rs * RS_CRASH_FATAL
, total INT PDO crash,_int_crashes_pdo,_crashes_int * INT_CRASH_PDO
, total INT injury crash,_int_crashes_inj,_crashes_int * INT_CRASH_INJURY
, total INT fatal crash,_int_crashes_fat,_crashes_int * INT_CRASH_FATAL
, total annual  PDO crashes,total_pdo_crashes,_rs_crashes_pdo + _int_crashes_pdo
, total annual injury crashes,total_inj_crashes,_rs_crashes_inj + _int_crashes_inj
, total annual fatal crashes,total_fat_crashes,_rs_crashes_fat + _int_crashes_fat
*, total crashes cost,cost_of_crashes_benefit,(total_pdo_crashes * CRASH_COST_PDO + total_inj_crashes * CRASH_COST_INJURY + total_fat_crashes * CRASH_COST_FATAL) * DISCOUNT_RATE
#surface water,,,
*,water pollution cost,water_pollution_cost,_waterf * _vmt_total * WATER_POLLUTION_COST * DISCOUNT_RATE * ANNUALIZATION_FACTOR
#noise,,,
, Auto freeway noise cost,_auto_noise_cost_fwy,(_freeway | _ramp ) * _auto_volume_daily * (NOISE_COST_AUTO_FREEWAY /1000)
, Med trucks freeway noise cost,_mtrucks_noise_cost_fwy,(_freeway | _ramp )  *_med_truck_volume_daily * (NOISE_COST_MEDTRUCKS_FREEWAY/1000)
, Heavy trucks freeway noise cost,_htrucks_noise_cost_fwy,(_freeway | _ramp )  *_heavy_truck_volume_daily * (NOISE_COST_HEVTRUCKS_FREEWAY/1000)
, Auto arterial noise cost,_auto_noise_cost_art,_arterial * _auto_volume_daily * (NOISE_COST_AUTO_ARTERIAL/1000)
, Med trucks arterial noise cost,_mtrucks_noise_cost_art,_arterial *_med_truck_volume_daily * (NOISE_COST_MEDTRUCKS_ARTERIAL/1000)
, Heavy trucks arterial noise cost,_htrucks_noise_cost_art,_arterial *_heavy_truck_volume_daily * (NOISE_COST_HEVTRUCKS_ARTERIAL/1000)
, Auto collector noise cost,_auto_noise_cost_col,_collector * _auto_volume_daily * (NOISE_COST_AUTO_COLLECTOR/1000)
, Med trucks collector noise cost,_mtrucks_noise_cost_col,_collector *_med_truck_volume_daily * (NOISE_COST_MEDTRUCKS_COLLECTOR/1000)
, Heavy trucks collector noise cost,_htrucks_noise_cost_col,_collector *_heavy_truck_volume_daily * (NOISE_COST_HEVTRUCKS_COLLECTOR/1000)
, ,_freeway_noise_cost,_auto_noise_cost_fwy + _mtrucks_noise_cost_fwy + _htrucks_noise_cost_fwy
, ,_arterial_noise_cost,_auto_noise_cost_art + _mtrucks_noise_cost_art + _htrucks_noise_cost_art
, ,_collector_noise_cost,_auto_noise_cost_col + _mtrucks_noise_cost_col + _htrucks_noise_cost_col
*,noise pollution cost,total_noise_cost,_noisef * (_freeway_noise_cost + _arterial_noise_cost + _collector_noise_cost) * DISCOUNT_RATE * ANNUALIZATION_FACTOR
#emissions lookup table,,,
,set lookup index on table,_EMISSIONS_TABLE,EMISSIONS.set_index(EMISSIONS['Ltype'] + '_' +  EMISSIONS['Speed'].astype(str))
,,_ltype,_freeway * 1 + _arterial * 2 + _collector * 3 + _ramp * 4
,,_ltype,"_ltype.replace(1,'Fwy')"
,,_ltype,"_ltype.replace(2,'Art')"
,,_ltype,"_ltype.replace(3,'Local')"
,,_ltype,"_ltype.replace(4,'Ramp')"
,,_emissions_key,"_ltype.astype(str) + '_' + _speed.clip(lower=3, upper=65).round().astype(int).astype(str)"
,,_co2_rate,_emissions_key.map(_EMISSIONS_TABLE['pollutantID_' + str(CO2_PTYPE)])
,,_pm25_rate,_emissions_key.map(_EMISSIONS_TABLE['pollutantID_' + str(PM25_PTYPE)])
,,_pm10_rate,_emissions_key.map(_EMISSIONS_TABLE['pollutantID_' + str(PM10_PTYPE)])
,,_nox_rate,_emissions_key.map(_EMISSIONS_TABLE['pollutantID_' + str(NOX_PTYPE)])
,,_vocs_rate,_emissions_key.map(_EMISSIONS_TABLE['pollutantID_' + str(VOCS_PTYPE)])
,co2 emissions cost,emissions_co2,_co2_rate * _vmt_total * GRAMS_TO_METRIC_TONS * CO2_COST * DISCOUNT_RATE * ANNUALIZATION_FACTOR
,pm25 emissons cost,emissions_pm25,_pm25_rate * _vmt_total * GRAMS_TO_METRIC_TONS * PM25_COST *DISCOUNT_RATE * ANNUALIZATION_FACTOR
,pm10 emissions cost,emissions_pm10,_pm10_rate * _vmt_total * GRAMS_TO_METRIC_TONS * PM10_COST * DISCOUNT_RATE * ANNUALIZATION_FACTOR
,nox emissions costs,emissions_nox,_nox_rate * _vmt_total * GRAMS_TO_METRIC_TONS * NOX_COST * DISCOUNT_RATE * ANNUALIZATION_FACTOR
,vocs emissions costs,emissions_vocs,_vocs_rate * _vmt_total * GRAMS_TO_METRIC_TONS * VOCS_COST * DISCOUNT_RATE * ANNUALIZATION_FACTOR
*,total emissions cost,emissions,emissions_co2 + emissions_pm25 + emissions_pm10 + emissions_nox + emissions_vocs
#vehicle operating costs ,,,
,,_fuelconsump_rate,_emissions_key.map(_EMISSIONS_TABLE['pollutantID_' + str(FUEL_CONSUMPTION_PTYPE)])
,,auto_fuel_cost,_auto_volume_daily * _length * _fuelconsump_rate * GALLON_TO_BTU * GAS_COST
,,truck_fuel_cost,_truck_volume_daily * _length * _fuelconsump_rate * GALLON_TO_BTU * TRUCK_GAS_COST
*,fuel auto operating cost,fuel_cost,(auto_fuel_cost + truck_fuel_cost) * DISCOUNT_RATE * ANNUALIZATION_FACTOR
#vehicle operating costs - non-fuel,,,
,,auto_nonfuel_cost,_auto_volume_daily * _length * CAR_COST_PER_MILE
,,truck_nonfuel_cost,_truck_volume_daily * _length * TRUCK_COST_PER_MILE
*,nonfuel auto operating cost,nonfuel_cost,(auto_nonfuel_cost + truck_nonfuel_cost) * DISCOUNT_RATE * ANNUALIZATION_FACTOR
